name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: fmgo_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          cache: true

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@v1.11.0

      - name: Run Unit Tests
        run: |
          mkdir -p coverage test-reports
          gotestsum --format pkgname \
            --junitfile test-reports/junit.xml \
            --jsonfile test-reports/tests.json \
            -- -timeout 10m \
            -coverprofile=coverage/coverage.out \
            -covermode=atomic \
            ./...

      - name: Run Integration Tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: fmgo_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          MONGO_URI: mongodb://localhost:27017
          RABBITMQ_HOST: localhost
          RABBITMQ_PORT: 5672
        run: |
          mkdir -p test-reports/integration
          gotestsum --format pkgname \
            --junitfile test-reports/integration/junit.xml \
            --jsonfile test-reports/integration/tests.json \
            -- -tags=integration \
            -timeout 15m \
            ./...

      - name: Generate Coverage Report
        run: |
          go tool cover -html=coverage/coverage.out -o coverage/coverage.html
          go tool cover -func=coverage/coverage.out

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-reports/
            coverage/

      - name: Check Coverage
        run: |
          COVERAGE=$(go tool cover -func=coverage/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "La cobertura ($COVERAGE%) está por debajo del mínimo requerido (80%)"
            exit 1
          fi 