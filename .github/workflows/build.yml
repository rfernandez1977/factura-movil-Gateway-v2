name: Build and Deploy

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.2'
          cache: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Binary
        run: |
          mkdir -p build
          GOOS=linux GOARCH=amd64 go build -o build/fmgo-linux-amd64 ./cmd/fmgo
          GOOS=darwin GOARCH=amd64 go build -o build/fmgo-darwin-amd64 ./cmd/fmgo
          GOOS=darwin GOARCH=arm64 go build -o build/fmgo-darwin-arm64 ./cmd/fmgo

      - name: Run Tests Before Release
        run: go test -v ./...

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: fmgo/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries
          path: build/

  deploy:
    name: Deploy
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: binaries
          path: build

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/fmgo-linux-amd64
            build/fmgo-darwin-amd64
            build/fmgo-darwin-arm64
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Deploy to Production
        if: success()
        run: |
          echo "Desplegando versión ${{ github.ref_name }} en producción"
          # Aquí irían los comandos de despliegue específicos
          # Por ejemplo, actualizar Kubernetes, notificar servicios, etc. 